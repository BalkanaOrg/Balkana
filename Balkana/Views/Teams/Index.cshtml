@model AllTeamsQueryModel
@{
    ViewData["Title"] = "Balkana Teams";
}

<link rel="stylesheet" href="~/css/rankings.css" />

<div class="rankings-container">
    <!-- Header Section -->
    <div class="rankings-header">
        <div class="header-content">
            <h1 class="main-title">BALKANA </h1>
            <h1 class="main-title">
                @(string.IsNullOrWhiteSpace(Model.SelectedGame)
                ? "TEAMS"
                : Model.SelectedGame.ToUpper())
            </h1>
            <div class="title-underline"></div>
            <p class="subtitle">Rankings</p>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="search-filter-section">
        <form method="get" class="rankings-form" id="filterForm">
            <div class="search-container">
                <input asp-for="SearchTerm"
                       class="search-input"
                       placeholder="Search teams by tag or name..." />
                <div class="search-icon">
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
            </div>

            <div class="filter-buttons">
                <!-- Game Filters -->
                @foreach (var game in Model.Games)
                {
                    <a class="filter-btn @(Model.SelectedGame == game ? "active" : "")"
                       asp-route-game="@game"
                       asp-route-year="@Model.Year"
                       asp-route-searchTerm="@Model.SearchTerm">
                        @game
                    </a>
                }
            </div>

            <!-- Year Filter -->
            <div class="year-filter-section">
                <label for="yearSelect" class="year-filter-label">Year:</label>
                <select asp-for="Year" 
                        id="yearSelect" 
                        class="year-select"
                        onchange="document.getElementById('filterForm').submit();">
                    <option value="">All Years</option>
                    @foreach (var year in Model.AvailableYears)
                    {
                        <option value="@year" selected="@(Model.Year == year)">@year</option>
                    }
                </select>
            </div>
        </form>
    </div>

    <!-- Rankings Grid -->
    <div class="rankings-grid">
        <partial name="_TeamsPartial" model="@Model.Teams" />
    </div>

    <!-- No Results Message -->
    @if (!Model.Teams.Any())
    {
        <div class="no-results">
            <div class="no-results-icon">🔍</div>
            <h3 class="no-results-title">No teams found</h3>
            <p class="no-results-text">Try adjusting your search or filter criteria</p>
        </div>
    }

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="loading-indicator" style="display: none;">
        <div class="loading-spinner"></div>
        <p>Loading more teams...</p>
    </div>

    <!-- Footer Stats -->
    <div class="footer-stats">
        <div class="stats-container">
            <div class="stat-box">
                <div class="stat-number">@Model.Teams.Count()</div>
                <div class="stat-text">Teams</div>
            </div>
            <div class="stat-divider"></div>
            <div class="stat-box">
                <div class="stat-number">@Model.AbsoluteNumberOfTeams</div>
                <div class="stat-text">Total</div>
            </div>
            <div class="stat-divider"></div>
            <div class="stat-box">
                <div class="stat-number">@Model.Games.Count()</div>
                <div class="stat-text">Esports</div>
            </div>
        </div>
    </div>
</div>

<script>
    let currentPage = @Model.CurrentPage;
    let isLoading = false;
    let hasMoreData = true;
    const game = '@Model.SelectedGame';
    const year = '@Model.Year';
    const searchTerm = '@Model.SearchTerm';

    // Lazy loading on scroll
    window.addEventListener('scroll', function() {
        if (isLoading || !hasMoreData) return;

        const scrollPosition = window.innerHeight + window.scrollY;
        const documentHeight = document.documentElement.scrollHeight;
        const threshold = 200; // Load when 200px from bottom

        if (scrollPosition >= documentHeight - threshold) {
            loadMoreTeams();
        }
    });

    function loadMoreTeams() {
        if (isLoading || !hasMoreData) return;

        isLoading = true;
        showLoadingIndicator();

        const nextPage = currentPage + 1;
        const url = buildUrl(nextPage);

        fetch(url)
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newTeams = doc.querySelectorAll('.team-card');
                
                if (newTeams.length === 0) {
                    hasMoreData = false;
                } else {
                    const rankingsGrid = document.querySelector('.rankings-grid');
                    newTeams.forEach(team => {
                        rankingsGrid.appendChild(team);
                    });
                    currentPage = nextPage;
                }
            })
            .catch(error => {
                console.error('Error loading more teams:', error);
                hasMoreData = false;
            })
            .finally(() => {
                isLoading = false;
                hideLoadingIndicator();
            });
    }

    function buildUrl(page) {
        let url = `/Teams/Index?currentPage=${page}`;
        
        if (game) url += `&game=${encodeURIComponent(game)}`;
        if (year) url += `&year=${encodeURIComponent(year)}`;
        if (searchTerm) url += `&searchTerm=${encodeURIComponent(searchTerm)}`;
        
        return url;
    }

    function showLoadingIndicator() {
        document.getElementById('loadingIndicator').style.display = 'block';
    }

    function hideLoadingIndicator() {
        document.getElementById('loadingIndicator').style.display = 'none';
    }

    // Reset lazy loading when filters change
    document.getElementById('filterForm').addEventListener('submit', function() {
        currentPage = 1;
        hasMoreData = true;
    });
</script>